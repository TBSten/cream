package me.tbsten.cream.ksp.transform

import com.google.devtools.ksp.symbol.KSClassDeclaration
import me.tbsten.cream.ksp.GenerateSourceAnnotation
import me.tbsten.cream.ksp.options.CreamOptions
import me.tbsten.cream.ksp.util.fullName
import me.tbsten.cream.ksp.util.underPackageName
import me.tbsten.cream.ksp.util.visibilityStr
import java.io.BufferedWriter

internal fun BufferedWriter.appendCopyToObjectFunction(
    source: KSClassDeclaration,
    targetObject: KSClassDeclaration,
    generateSourceAnnotation: GenerateSourceAnnotation<*>,
    options: CreamOptions,
) {
    val funName =
        copyFunctionName(
            source.toClassDeclarationInfo(),
            targetObject.toClassDeclarationInfo(),
            options,
        )
    appendCopyToObjectKDoc(source, targetObject, generateSourceAnnotation, funName.toString())
    appendLine(
        "${targetObject.visibilityStr} fun ${source.fullName}.$funName() = ${targetObject.fullName}",
    )
}

internal fun BufferedWriter.appendCombineToObjectFunction(
    primarySource: KSClassDeclaration,
    otherSources: List<KSClassDeclaration>,
    targetObject: KSClassDeclaration,
    generateSourceAnnotation: GenerateSourceAnnotation<*>,
    options: CreamOptions,
) {
    val allSources = listOf(primarySource) + otherSources
    val funName =
        copyFunctionName(
            primarySource.toClassDeclarationInfo(),
            targetObject.toClassDeclarationInfo(),
            options,
        )
    appendCombineToObjectKDoc(allSources, targetObject, generateSourceAnnotation, funName.toString())
    appendLine(
        "${targetObject.visibilityStr} fun ${primarySource.fullName}.$funName(${
            otherSources.joinToString(", ") { otherSource ->
                "${otherSource.underPackageName.replaceFirstChar { it.lowercase() }}: ${otherSource.fullName}"
            }
        }) = ${targetObject.fullName}",
    )
}

private fun BufferedWriter.appendCombineToObjectKDoc(
    sources: List<KSClassDeclaration>,
    target: KSClassDeclaration,
    generateSourceAnnotation: GenerateSourceAnnotation<*>,
    funName: String,
) {
    appendAutoGeneratedFunctionKDoc(
        generateSourceAnnotation = generateSourceAnnotation,
        seeClasses = sources + target,
    ) {
        val sourcesStr = sources.joinToString(" + ") { "[${it.underPackageName}]" }
        appendLine("$sourcesStr -> [${target.underPackageName}] copy function.")
        appendLine()

        val primarySource = sources.first()
        val otherSourceParams =
            sources.drop(1).joinToString(", ") {
                "${it.underPackageName.replaceFirstChar { c -> c.lowercase() }} = ${it.simpleName.asString()}(...)"
            }
        val exampleLines =
            buildString {
                appendLine(
                    "val ${primarySource.underPackageName.replaceFirstChar {
                        it.lowercase()
                    }} = ${primarySource.simpleName.asString()}(...)",
                )
                sources.drop(1).forEach { otherSource ->
                    appendLine(
                        "val ${otherSource.underPackageName.replaceFirstChar {
                            it.lowercase()
                        }} = ${otherSource.simpleName.asString()}(...)",
                    )
                }
                append("val target = ${primarySource.underPackageName.replaceFirstChar { it.lowercase() }}.$funName($otherSourceParams)")
            }
        appendExample("Example: Basic", exampleLines)
    }
}

private fun BufferedWriter.appendCopyToObjectKDoc(
    source: KSClassDeclaration,
    target: KSClassDeclaration,
    generateSourceAnnotation: GenerateSourceAnnotation<*>,
    funName: String,
) {
    appendAutoGeneratedFunctionKDoc(
        generateSourceAnnotation = generateSourceAnnotation,
        seeClasses = listOf(source, target),
    ) {
        appendLine("${source.underPackageName} -> ${target.underPackageName} copy function.")

        appendExample(
            "Example: Basic",
            """
            val source = ${source.simpleName.asString()}(...)
            val target = source.$funName()
            """.trimIndent(),
        )
    }
}
